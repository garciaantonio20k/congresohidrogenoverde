function tDialogos() {
    this.inheritFrom = tBase
    this.inheritFrom()

    this.MENSAJE_LOADING_DEFECTO = objTraducciones.get(4088)
    this.MENSAJE_LOADING = this.MENSAJE_LOADING_DEFECTO

    this.dialogoError = null
    this.dialogAlert = null
    this.dialogConfirm = ""
    this.dialogAviso = ""
    //this.dialogCortinilla = $('body').append("<div class='notifications top-right'></div>");
    this.dialogLoading = new BootstrapDialog({
        message:
            '<div class="row"><div class="col-sm-12">' +
            this.mensajeLoadingPorDefecto +
            "</div></div>",
        animate: false,
        cssClass: "loading",
        verticalScroll: false,

        onshow: function (dialog) {
            objDialogos.resetProgressBar()
            objDialogos.startProgressBar()
        },
        onhide: function (dialog) {
            objDialogos.stopProgressBar()
        },
        height: 200,
    })

    this.cargando = false

    this.incremento = 10
    this.progreso = 0
    this.progresoInicial = 0

    this.startProgressBar = function () {
        //this.interval = setInterval('objDialogos.increaseProgressBar()', 300)
        this.progreso = 100
        this.refreshProgressBar()
    }

    this.stopProgressBar = function () {
        clearInterval(objDialogos.interval)
    }

    this.resetProgressBar = function () {
        this.progreso = 0
        this.refreshProgressBar()
    }

    this.refreshProgressBar = function () {
        this.dialogLoading
            .getModal()
            .find("#barraProgresoLoading")
            .css("width", this.progreso + "%")
            .attr("aria-valuenow", this.progreso)
    }

    this.increaseProgressBar = function () {
        if (this.progreso == 100) this.progreso = 0
        else this.progreso += this.incremento
        this.refreshProgressBar()
    }

    this.init = function () {}

    this.ajustarAlturasDialogo = function (dialogRef) {
        var alturaModalHeader = dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-header")
            .outerHeight()
        var alturaModalBody = dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-body")
            .outerHeight()
        var alturaModalFooter = dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-footer")
            .outerHeight()
        var alturaTotal =
            alturaModalHeader + alturaModalBody + alturaModalFooter

        // LE PONEMOS UN 20% MÁS
        alturaTotal = alturaTotal * 1.21

        dialogRef
            .getModal()
            .find(".modal-dialog .modal-content")
            .css("height", alturaTotal + "px")
    }

    this.ajustarAlturasDialogoAlert = function (dialogRef) {
        var alturaModalHeader = dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-header")
            .outerHeight()
        var alturaModalBody = dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-body")
            .outerHeight()
        var alturaModalFooter = dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-footer")
            .outerHeight()
        var alturaTotal =
            alturaModalHeader + alturaModalBody + alturaModalFooter

        // LE PONEMOS UN 20% MÁS
        alturaTotal = alturaTotal + 30

        dialogRef
            .getModal()
            .find(".modal-dialog .modal-content")
            .css("height", alturaTotal + "px")
    }

    this.ajustarAlturasDialogoConfirm = function (dialogRef) {
        var alturaModalHeader = dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-header")
            .outerHeight()
        var alturaModalBody = dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-body")
            .outerHeight()
        var alturaModalFooter = dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-footer")
            .outerHeight()
        var alturaTotal =
            alturaModalHeader + alturaModalBody + alturaModalFooter

        // LE PONEMOS UN 6% MÁS
        //alturaTotal = alturaTotal * 1.5;
        alturaTotal = alturaTotal + 65

        dialogRef
            .getModal()
            .find(".modal-dialog .modal-content")
            .css("height", alturaTotal + "px")
    }

    this.ajustarAnchurasDialogo = function (dialogRef) {
        const ajuste = 200

        dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-header")
            .outerWidth() + ajuste
        dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-body")
            .outerWidth() + ajuste
    }

    this.ajustarAnchurasDialogoCookies = function (dialogRef) {
        const ajuste = 200

        dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-header")
            .outerWidth() + ajuste
        dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-body")
            .outerWidth() + ajuste

        dialogRef
            .getModal()
            .find(".modal-dialog .modal-content .modal-footer")
            .outerWidth() + ajuste
    }

    this.alert = function (s, callbackOK, titulo, id) {
        if (typeof titulo == "undefined") titulo = objTraducciones.get(393)

        this.dialogoAlert = new BootstrapDialog({
            cssClass: "dialog-general dialog-alert",
            id: id ? id : BootstrapDialog.newGuid(),
            title: titulo,
            message: s,
            onshown: function (dialogRef) {
                objDialogos.ajustarAlturasDialogoAlert(dialogRef)
                objDialogos.ajustarAnchurasDialogo(dialogRef)
            },

            data: {
                callbackOK: callbackOK,
            },
            closable: true,
            buttons: [
                {
                    label: objTraducciones.get(395).toUpperCase(),
                    cssClass: "btn-primary",
                    action: function (dialog) {
                        if (typeof dialog.getData("callbackOK") === "function")
                            dialog.getData("callbackOK")(true)
                        else {
                            eval("" + dialog.getData("callbackOK") + "")
                        }
                        dialog.close()
                    },
                },
            ],
        }).open()
    }

    this.confirm = function (s, callbackOK, callbackCancel, width, height) {
        this.dialogConfirm = new BootstrapDialog({
            cssClass: "dialog-general dialog-confirm",
            title: objTraducciones.get(393),
            message: s,

            onshown: function (dialogRef) {
                objDialogos.ajustarAlturasDialogoConfirm(dialogRef)
            },

            closable: true,
            data: {
                callbackOK: callbackOK,
                callbackCancel: callbackCancel,
            },
            buttons: [
                {
                    label: objTraducciones.get(394).toUpperCase(),
                    action: function (dialog) {
                        if (
                            typeof dialog.getData("callbackCancel") ===
                            "function"
                        )
                            dialog.getData("callbackCancel")(false)
                        else {
                            eval("" + dialog.getData("callbackCancel") + "")
                        }
                        dialog.close()
                    },
                },
                {
                    label: objTraducciones.get(395).toUpperCase(),
                    cssClass: "btn-success",
                    action: function (dialog) {
                        if (typeof dialog.getData("callbackOK") === "function")
                            dialog.getData("callbackOK")(true)
                        else {
                            eval("" + dialog.getData("callbackOK") + "")
                        }
                        dialog.close()
                    },
                },
            ],
        }).open()
    }

    this.avisoCookies = function (
        s,
        callbackAceptarTodas,
        callbackRechazarTodas,
        callbackConfigurar,
        width,
        height,
    ) {
        this.dialogConfirm = new BootstrapDialog({
            cssClass: "dialog-general dialog-confirm dialog-cookies",
            title: objTraducciones.get(393),

            size: "size-large",

            message: s,

            onshown: function (dialogRef) {
                objDialogos.ajustarAlturasDialogoConfirm(dialogRef)
                objDialogos.ajustarAnchurasDialogoCookies(dialogRef)
            },

            closable: true,
            data: {
                callbackAceptarTodas: callbackAceptarTodas,
                callbackRechazarTodas: callbackRechazarTodas,
                callbackConfigurar: callbackConfigurar,
            },
            buttons: [
                {
                    label: objTraducciones.get(15542).toUpperCase(),
                    cssClass: "btn-success",
                    action: function (dialog) {
                        if (
                            typeof dialog.getData("callbackAceptarTodas") ===
                            "function"
                        )
                            dialog.getData("callbackAceptarTodas")(false)
                        else {
                            eval(
                                "" +
                                    dialog.getData("callbackAceptarTodas") +
                                    "",
                            )
                        }
                        dialog.close()
                    },
                },
                {
                    label: objTraducciones.get(15543).toUpperCase(),
                    cssClass: "btn-success",
                    action: function (dialog) {
                        if (
                            typeof dialog.getData("callbackRechazarTodas") ===
                            "function"
                        )
                            dialog.getData("callbackRechazarTodas")(true)
                        else {
                            eval(
                                "" +
                                    dialog.getData("callbackRechazarTodas") +
                                    "",
                            )
                        }
                        dialog.close()
                    },
                },
                {
                    label: objTraducciones.get(15544).toUpperCase(),
                    cssClass: "btn-success",
                    action: function (dialog) {
                        if (
                            typeof dialog.getData("callbackConfigurar") ===
                            "function"
                        )
                            dialog.getData("callbackConfigurar")(true)
                        else {
                            eval("" + dialog.getData("callbackConfigurar") + "")
                        }
                        dialog.close()
                    },
                },
            ],
        }).open()
    }

    this.aviso = function (s, f) {}

    this.aviso2 = function (
        s,
        callbackOK,
        callbackCancel,
        txtBtnOk,
        txtBtnCancel,
    ) {
        this.dialogConfirm = new BootstrapDialog({
            cssClass: "dialog-general dialog-confirm",
            title: objTraducciones.get(393),
            message: s,

            onshown: function (dialogRef) {
                objDialogos.ajustarAlturasDialogoConfirm(dialogRef)
            },

            closable: true,
            data: {
                callbackOK: callbackOK,
                callbackCancel: callbackCancel,
            },
            buttons: [
                {
                    label: txtBtnCancel.toUpperCase(),
                    cssClass: "btn-alert",
                    action: function (dialog) {
                        if (
                            typeof dialog.getData("callbackCancel") ===
                            "function"
                        )
                            dialog.getData("callbackCancel")(false)
                        else {
                            eval("" + dialog.getData("callbackCancel") + "")
                        }
                        dialog.close()
                    },
                },
                {
                    label: txtBtnOk.toUpperCase(),
                    cssClass: "btn-alert",
                    action: function (dialog) {
                        if (typeof dialog.getData("callbackOK") === "function")
                            dialog.getData("callbackOK")(true)
                        else {
                            eval("" + dialog.getData("callbackOK") + "")
                        }
                        dialog.close()
                    },
                },
            ],
        }).open()
    }

    this.error = function (s, t, callbackOK) {
        var titulo = ""

        if (typeof t == "undefined") t = objTraducciones.get(4114)

        this.dialogoAlert = new BootstrapDialog({
            cssClass: "dialog-general dialog-error",
            title: t,
            message: s,

            onshown: function (dialogRef) {
                objDialogos.ajustarAlturasDialogo(dialogRef)
                objDialogos.ajustarAnchurasDialogo(dialogRef)
            },

            data: {
                callbackOK: callbackOK,
            },
            type: BootstrapDialog.TYPE_DANGER,
            closable: true,
            buttons: [
                {
                    label: objTraducciones.get(395).toUpperCase(),
                    cssClass: "btn-success",
                    action: function (dialog) {
                        if (typeof dialog.getData("callbackOK") === "function")
                            dialog.getData("callbackOK")(true)
                        else {
                            eval("" + dialog.getData("callbackOK") + "")
                        }
                        dialog.close()
                    },
                },
            ],
        }).open()
    }

    this.showLoading = function (mensaje) {
        if (this.MENSAJE_LOADING == this.MENSAJE_LOADING_DEFECTO) {
            if (mensaje === undefined) mensaje = this.MENSAJE_LOADING_DEFECTO
            this.MENSAJE_LOADING = mensaje
        } else mensaje = this.MENSAJE_LOADING

        mensaje +=
            '<div class="progress" style="margin: 5px"><div id="barraProgresoLoading" class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: 100%"><span class="sr-only">100% Complete (success)</span></div</div>'

        if (!this.cargando) {
            this.cargando = true
            this.dialogLoading.realize()
            this.dialogLoading.getModalHeader().remove()
            this.dialogLoading.getModalFooter().remove()
            this.dialogLoading.open()
        }
        mensaje =
            '<div class="row"><div class="col-sm-12 v-center" style="width:100%"><div class="contenidoLoading">' +
            mensaje +
            "</div></div></div>"
        this.dialogLoading.setMessage(mensaje)
    }

    this.hideLoading = function () {
        try {
            this.cargando = false
            this.MENSAJE_LOADING = this.MENSAJE_LOADING_DEFECTO
            this.dialogLoading.close()
        } catch (e) {}
    }

    this.cortinilla = function (s) {
        //this.dialogCortinilla.notify(
        var cortinillas = $(".notifications")
        if (cortinillas.length > 0) {
            var i = 0
            for (i = 0; i < cortinillas.length; i++) {
                $(cortinillas[i]).remove()
            }
        }
        this.dialogCortinilla = $("body").append(
            "<div class='notifications top-right'></div>",
        )
        $(".notifications")
            .notify({
                message: { html: s },
                fadeOut: {
                    enabled: true,
                    delay: 3000,
                },
                onclose: function () {
                    $(this).remove()
                },
            })
            .show()
    }
}

var objDialogos = new tDialogos()
